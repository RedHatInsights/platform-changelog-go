{
  "openapi": "3.0.3",
  "info": {
    "title": "Platform Changelog API",
    "description": "Platform Changelog API Provides Change Data for Monitored Services",
    "version": "1.0.0"
  },
  "paths": {
    "/services": {
      "get": {
        "summary": "Returns list of registered services",
        "description": "Returns a list of services that have been registered with the changelog",
        "operationId": "get.services",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/nameParam"
          },
          {
            "$ref": "#/components/parameters/displayNameParam"
          },
          {
            "$ref": "#/components/parameters/tenantParam"
          },
          {
            "$ref": "#/components/parameters/namespaceParam"
          },
          {
            "$ref": "#/components/parameters/branchParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "summary": "Returns list of registered projects",
        "description": "Returns a list of projects that have been registered with the changelog",
        "operationId": "get.projects",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/nameParam"
          },
          {
            "$ref": "#/components/parameters/displayNameParam"
          },
          {
            "$ref": "#/components/parameters/tenantParam"
          },
          {
            "$ref": "#/components/parameters/namespaceParam"
          },
          {
            "$ref": "#/components/parameters/branchParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/timelines": {
      "get": {
        "summary": "Returns an array of timelines",
        "description": "Returns a list of all timelines",
        "operationId": "get.timelines",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/refFilter"
          },
          {
            "$ref": "#/components/parameters/repoFilter"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelinesData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/commits": {
      "get": {
        "summary": "Returns an array of commits",
        "description": "Returns a list of all commits",
        "operationId": "get.commits",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/refFilter"
          },
          {
            "$ref": "#/components/parameters/repoFilter"
          },
          {
            "$ref": "#/components/parameters/authorFilter"
          },
          {
            "$ref": "#/components/parameters/mergedByFilter"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelinesData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/deploys": {
      "get": {
        "summary": "Returns an array of deploys",
        "description": "Returns a list of all deploys",
        "operationId": "get.deploys",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/refFilter"
          },
          {
            "$ref": "#/components/parameters/repoFilter"
          },
          {
            "$ref": "#/components/parameters/clusterFilter"
          },
          {
            "$ref": "#/components/parameters/imageFilter"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelinesData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/services/{service_id}": {
      "get": {
        "summary": "Returns an individual service",
        "description": "returns an individual service",
        "operationId": "get.services.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/service_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/services/{service_id}/projects": {
      "get": {
        "summary": "Returns all projects for a specific service",
        "description": "Returns an array containing projects for a specific service",
        "operationId": "get.services.service.project",
        "parameters": [
          {
            "$ref": "#/components/parameters/service_id"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/services/{service_id}/timelines": {
      "get": {
        "summary": "Returns all the commits and deploys for a specific service",
        "description": "Returns an array containing timelines for a specific service",
        "operationId": "get.services.service.timelines",
        "parameters": [
          {
            "$ref": "#/components/parameters/service_id"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelinesData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/services/{service_id}/commits": {
      "get": {
        "summary": "Returns all the commits for a specific service",
        "description": "Returns an array containing commits for a specific service",
        "operationId": "get.services.service.commits",
        "parameters": [
          {
            "$ref": "#/components/parameters/service_id"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelinesData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/services/{service_id}/deploys": {
      "get": {
        "summary": "Returns all the deploys for a specific service",
        "description": "Returns an array containing deploys for a specific service",
        "operationId": "get.services.service.deploys",
        "parameters": [
          {
            "$ref": "#/components/parameters/service_id"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelinesData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/projects/{project_id}": {
      "get": {
        "summary": "Returns an individual project",
        "description": "returns an individual project",
        "operationId": "get.projects.project",
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/projects/{project_id}/timelines": {
      "get": {
        "summary": "Returns all the commits and deploys for a specific project",
        "description": "Returns an array containing timelines for a specific project",
        "operationId": "get.projects.project.timelines",
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/projects/{project_id}/commits": {
      "get": {
        "summary": "Returns all the commits for a specific project",
        "description": "Returns an array containing commits for a specific project",
        "operationId": "get.projects.project.commits",
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/projects/{project_id}/deploys": {
      "get": {
        "summary": "Returns all the deploys for a specific project",
        "description": "Returns an array containing deploys for a specific project",
        "operationId": "get.projects.project.deploys",
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/timelines/{ref}": {
      "get": {
        "summary": "Get data on a particular commit or deploy",
        "description": "Get data on a particular timelines",
        "operationId": "get.timelines.ref",
        "parameters": [
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeline"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/commits/{ref}": {
      "get": {
        "summary": "Get data on a particular commit",
        "description": "Get data on a particular commit",
        "operationId": "get.commits.ref",
        "parameters": [
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeline"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/deploys/{ref}": {
      "get": {
        "summary": "Get data on a particular deploy",
        "description": "Get data on a particular deploy",
        "operationId": "get.deploys.ref",
        "parameters": [
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeline"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/github-webhook": {
      "post": {
        "description": "Create a new commit from Github",
        "operationId": "post.githubWebhook",
        "responses": {
          "200": {
            "description": "OK message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "default": {
            "description": "An Error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/gitlab-webhook": {
      "post": {
        "description": "Create a new commit from Gitlab",
        "operationId": "post.gitlabWebhook",
        "responses": {
          "200": {
            "description": "OK message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "default": {
            "description": "An Error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/github": {
      "post": {
        "description": "Create a new Github commit from Jenkins job",
        "operationId": "post.github",
        "requestBody": {
          "description": "Simple JSON Data from commit Jenkins job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GithubPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "default": {
            "description": "An Error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/tekton": {
      "post": {
        "description": "Report a new deployment through Tekton",
        "operationId": "post.tekton",
        "requestBody": {
          "description": "Simple JSON Data from the Tekton task",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TektonPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "default": {
            "description": "An Error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ServicesData": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        }
      },
      "ProjectsData": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        }
      },
      "TimelinesData": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Timeline"
            }
          }
        }
      },
      "Timeline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "service_id": {
            "type": "integer"
          },
          "timestamp": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "merged_by": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace the app deployed into"
          },
          "cluster": {
            "type": "string",
            "description": "The cluster the app deployed into"
          },
          "image": {
            "type": "string",
            "description": "The image tag that was deployed"
          },
          "url": {
            "type": "string",
            "description": "Link to the merged PR"
          }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "Name of the service"
          },
          "display_name": {
            "type": "string",
            "description": "Preferred name"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant the service belongs to"
          },
          "gh_repo": {
            "type": "string",
            "description": "Github repo url"
          },
          "gl_repo": {
            "type": "string",
            "description": "Gitlab repo url"
          },
          "deploy_file": {
            "type": "string",
            "description": "Link to app interface deploy resource"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace the app is deployed in openshift"
          },
          "branch": {
            "type": "string",
            "description": "monitored branch"
          },
          "latest_commit": {
            "$ref": "#/components/schemas/Timeline",
            "optional": true
          },
          "latest_deploy": {
            "$ref": "#/components/schemas/Timeline",
            "optional": true
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "Name of the service"
          },
          "repo": {
            "type": "string",
            "description": "Repo url"
          },
          "deploy_file": {
            "type": "string",
            "description": "Link to app interface deploy resource"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace the app is deployed in openshift"
          },
          "branch": {
            "type": "string",
            "description": "monitored branch"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "message"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "description": "Message text"
          }
        },
        "required": [
          "msg"
        ]
      },
      "GithubPayload": {
        "type": "object",
        "properties": {
          "app": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "merged_by": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "commits": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "ref": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "TektonPayload": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "app": {
            "type": "string"
          },
          "env": {
            "type": "string"
          },
          "triggered_by": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "service_id": {
        "in": "path",
        "name": "service_id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The service id"
      },
      "project_id": {
        "in": "path",
        "name": "project_id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The project id"
      },
      "ref": {
        "in": "path",
        "name": "ref",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The commit reference"
      },
      "offsetParam": {
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "description": "The number of items to skip before starting to collect the result set."
      },
      "limitParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50,
          "default": 10
        },
        "description": "The number of items to return."
      },
      "refFilter": {
        "in": "query",
        "name": "ref",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Filter by references"
      },
      "repoFilter": {
        "in": "query",
        "name": "repo",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Filter by repositories"
      },
      "authorFilter": {
        "in": "query",
        "name": "author",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Filter by authors"
      },
      "mergedByFilter": {
        "in": "query",
        "name": "merged_by",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Filter by users who merged a PR"
      },
      "clusterFilter": {
        "in": "query",
        "name": "cluster",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Filter by cluster names"
      },
      "imageFilter": {
        "in": "query",
        "name": "image",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Filter by images"
      },
      "startDate": {
        "in": "query",
        "name": "start_date",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        },
        "description": "The start date"
      },
      "endDate": {
        "in": "query",
        "name": "end_date",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        },
        "description": "The end date"
      },
      "nameParam": {
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The service name (heading in services.yml)"
      },
      "displayNameParam": {
        "in": "query",
        "name": "display_name",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The service's display name (shown in the UI)'"
      },
      "tenantParam": {
        "in": "query",
        "name": "tenant",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The tenant the service belongs to"
      },
      "namespaceParam": {
        "in": "query",
        "name": "namespace",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The namespace the service is in"
      },
      "branchParam": {
        "in": "query",
        "name": "branch",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Branch the service is monitored on (i.e. master)"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}